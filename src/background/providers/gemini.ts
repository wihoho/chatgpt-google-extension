import { GenerateAnswerParams, Provider } from '../types'

export class GeminiProvider implements Provider {
  constructor(private apiKey: string, private model: string = 'gemini-2.5-flash') {
    this.apiKey = apiKey
    this.model = model
  }

  async generateAnswer(params: GenerateAnswerParams) {
    let result = ''
    
    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${this.model}:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: params.prompt
            }]
          }],
          generationConfig: {
            temperature: 0.1,
            topK: 1,
            topP: 1,
            maxOutputTokens: 2048,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        }),
        signal: params.signal,
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        let errorMessage = `HTTP ${response.status}: ${response.statusText}`
        
        if (errorData.error) {
          if (errorData.error.message) {
            errorMessage = errorData.error.message
          } else if (errorData.error.details) {
            errorMessage = errorData.error.details[0]?.reason || errorMessage
          }
        }
        
        throw new Error(errorMessage)
      }

      const data = await response.json()
      
      if (data.candidates && data.candidates.length > 0) {
        const candidate = data.candidates[0]
        if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
          result = candidate.content.parts[0].text || ''
          
          params.onEvent({
            type: 'answer',
            data: {
              text: result,
              messageId: 'gemini-' + Date.now(),
              conversationId: 'gemini-' + Date.now(),
            },
          })
        } else {
          throw new Error('No content generated by Gemini')
        }
      } else {
        throw new Error('No candidates returned by Gemini')
      }

      params.onEvent({ type: 'done' })
    } catch (error) {
      console.error('Gemini API error:', error)
      params.onEvent({
        type: 'error',
        data: { error }
      })
    }

    return {}
  }
}
